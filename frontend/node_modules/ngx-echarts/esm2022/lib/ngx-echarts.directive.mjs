import { Directive, EventEmitter, Inject, InjectionToken, Input, Output, } from '@angular/core';
import { Observable, ReplaySubject, Subject, asyncScheduler } from 'rxjs';
import { switchMap, throttleTime } from 'rxjs/operators';
import { ChangeFilterV2 } from './change-filter-v2';
import * as i0 from "@angular/core";
export const NGX_ECHARTS_CONFIG = new InjectionToken('NGX_ECHARTS_CONFIG');
export class NgxEchartsDirective {
    constructor(config, el, ngZone) {
        this.el = el;
        this.ngZone = ngZone;
        this.options = null;
        this.theme = null;
        this.initOpts = null;
        this.merge = null;
        this.autoResize = true;
        this.loading = false;
        this.loadingType = 'default';
        this.loadingOpts = null;
        // ngx-echarts events
        this.chartInit = new EventEmitter();
        this.optionsError = new EventEmitter();
        // echarts mouse events
        this.chartClick = this.createLazyEvent('click');
        this.chartDblClick = this.createLazyEvent('dblclick');
        this.chartMouseDown = this.createLazyEvent('mousedown');
        this.chartMouseMove = this.createLazyEvent('mousemove');
        this.chartMouseUp = this.createLazyEvent('mouseup');
        this.chartMouseOver = this.createLazyEvent('mouseover');
        this.chartMouseOut = this.createLazyEvent('mouseout');
        this.chartGlobalOut = this.createLazyEvent('globalout');
        this.chartContextMenu = this.createLazyEvent('contextmenu');
        // echarts events
        this.chartHighlight = this.createLazyEvent('highlight');
        this.chartDownplay = this.createLazyEvent('downplay');
        this.chartSelectChanged = this.createLazyEvent('selectchanged');
        this.chartLegendSelectChanged = this.createLazyEvent('legendselectchanged');
        this.chartLegendSelected = this.createLazyEvent('legendselected');
        this.chartLegendUnselected = this.createLazyEvent('legendunselected');
        this.chartLegendLegendSelectAll = this.createLazyEvent('legendselectall');
        this.chartLegendLegendInverseSelect = this.createLazyEvent('legendinverseselect');
        this.chartLegendScroll = this.createLazyEvent('legendscroll');
        this.chartDataZoom = this.createLazyEvent('datazoom');
        this.chartDataRangeSelected = this.createLazyEvent('datarangeselected');
        this.chartGraphRoam = this.createLazyEvent('graphroam');
        this.chartGeoRoam = this.createLazyEvent('georoam');
        this.chartTreeRoam = this.createLazyEvent('treeroam');
        this.chartTimelineChanged = this.createLazyEvent('timelinechanged');
        this.chartTimelinePlayChanged = this.createLazyEvent('timelineplaychanged');
        this.chartRestore = this.createLazyEvent('restore');
        this.chartDataViewChanged = this.createLazyEvent('dataviewchanged');
        this.chartMagicTypeChanged = this.createLazyEvent('magictypechanged');
        this.chartGeoSelectChanged = this.createLazyEvent('geoselectchanged');
        this.chartGeoSelected = this.createLazyEvent('geoselected');
        this.chartGeoUnselected = this.createLazyEvent('geounselected');
        this.chartAxisAreaSelected = this.createLazyEvent('axisareaselected');
        this.chartBrush = this.createLazyEvent('brush');
        this.chartBrushEnd = this.createLazyEvent('brushend');
        this.chartBrushSelected = this.createLazyEvent('brushselected');
        this.chartGlobalCursorTaken = this.createLazyEvent('globalcursortaken');
        this.chartRendered = this.createLazyEvent('rendered');
        this.chartFinished = this.createLazyEvent('finished');
        this.animationFrameID = null;
        this.chart$ = new ReplaySubject(1);
        this.resize$ = new Subject();
        this.changeFilter = new ChangeFilterV2();
        this.resizeObFired = false;
        this.echarts = config.echarts;
        this.theme = config.theme || null;
    }
    ngOnChanges(changes) {
        this.changeFilter.doFilter(changes);
    }
    ngOnInit() {
        if (!window.ResizeObserver) {
            throw new Error('please install a polyfill for ResizeObserver');
        }
        this.resizeSub = this.resize$
            .pipe(throttleTime(100, asyncScheduler, { leading: false, trailing: true }))
            .subscribe(() => this.resize());
        if (this.autoResize) {
            // https://github.com/xieziyu/ngx-echarts/issues/413
            this.resizeOb = this.ngZone.runOutsideAngular(() => new window.ResizeObserver(entries => {
                for (const entry of entries) {
                    if (entry.target === this.el.nativeElement) {
                        // Ignore first fire on insertion, no resize actually happened
                        if (!this.resizeObFired) {
                            this.resizeObFired = true;
                        }
                        else {
                            this.animationFrameID = window.requestAnimationFrame(() => {
                                this.resize$.next();
                            });
                        }
                    }
                }
            }));
            this.resizeOb.observe(this.el.nativeElement);
        }
        this.changeFilter.notFirstAndEmpty('options', opt => this.onOptionsChange(opt));
        this.changeFilter.notFirstAndEmpty('merge', opt => this.setOption(opt));
        this.changeFilter.has('loading', v => this.toggleLoading(!!v));
        this.changeFilter.notFirst('theme', () => this.refreshChart());
    }
    ngOnDestroy() {
        window.clearTimeout(this.initChartTimer);
        if (this.resizeSub) {
            this.resizeSub.unsubscribe();
        }
        if (this.animationFrameID) {
            window.cancelAnimationFrame(this.animationFrameID);
        }
        if (this.resizeOb) {
            this.resizeOb.unobserve(this.el.nativeElement);
        }
        if (this.loadingSub) {
            this.loadingSub.unsubscribe();
        }
        this.changeFilter.dispose();
        this.dispose();
    }
    ngAfterViewInit() {
        this.initChartTimer = window.setTimeout(() => this.initChart());
    }
    dispose() {
        if (this.chart) {
            if (!this.chart.isDisposed()) {
                this.chart.dispose();
            }
            this.chart = null;
        }
    }
    /**
     * resize chart
     */
    resize() {
        if (this.chart) {
            this.chart.resize();
        }
    }
    toggleLoading(loading) {
        if (this.chart) {
            loading
                ? this.chart.showLoading(this.loadingType, this.loadingOpts)
                : this.chart.hideLoading();
        }
        else {
            this.loadingSub = this.chart$.subscribe(chart => loading ? chart.showLoading(this.loadingType, this.loadingOpts) : chart.hideLoading());
        }
    }
    setOption(option, opts) {
        if (this.chart) {
            try {
                this.chart.setOption(option, opts);
            }
            catch (e) {
                console.error(e);
                this.optionsError.emit(e);
            }
        }
    }
    /**
     * dispose old chart and create a new one.
     */
    async refreshChart() {
        this.dispose();
        await this.initChart();
    }
    createChart() {
        const dom = this.el.nativeElement;
        if (window && window.getComputedStyle) {
            const prop = window.getComputedStyle(dom, null).getPropertyValue('height');
            if ((!prop || prop === '0px') && (!dom.style.height || dom.style.height === '0px')) {
                dom.style.height = '400px';
            }
        }
        // here a bit tricky: we check if the echarts module is provided as function returning native import('...') then use the promise
        // otherwise create the function that imitates behaviour above with a provided as is module
        return this.ngZone.runOutsideAngular(() => {
            const load = typeof this.echarts === 'function' ? this.echarts : () => Promise.resolve(this.echarts);
            return load().then(({ init }) => init(dom, this.theme, this.initOpts));
        });
    }
    async initChart() {
        await this.onOptionsChange(this.options);
        if (this.merge && this.chart) {
            this.setOption(this.merge);
        }
    }
    async onOptionsChange(opt) {
        if (!opt) {
            return;
        }
        if (this.chart) {
            this.setOption(this.options, true);
        }
        else {
            this.chart = await this.createChart();
            this.chart$.next(this.chart);
            this.chartInit.emit(this.chart);
            this.setOption(this.options, true);
        }
    }
    // allows to lazily bind to only those events that are requested through the `@Output` by parent components
    // see https://stackoverflow.com/questions/51787972/optimal-reentering-the-ngzone-from-eventemitter-event for more info
    createLazyEvent(eventName) {
        return this.chartInit.pipe(switchMap((chart) => new Observable(observer => {
            chart.on(eventName, (data) => this.ngZone.run(() => observer.next(data)));
            return () => {
                if (this.chart) {
                    if (!this.chart.isDisposed()) {
                        chart.off(eventName);
                    }
                }
            };
        })));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: NgxEchartsDirective, deps: [{ token: NGX_ECHARTS_CONFIG }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.0.0", type: NgxEchartsDirective, isStandalone: true, selector: "echarts, [echarts]", inputs: { options: "options", theme: "theme", initOpts: "initOpts", merge: "merge", autoResize: "autoResize", loading: "loading", loadingType: "loadingType", loadingOpts: "loadingOpts" }, outputs: { chartInit: "chartInit", optionsError: "optionsError", chartClick: "chartClick", chartDblClick: "chartDblClick", chartMouseDown: "chartMouseDown", chartMouseMove: "chartMouseMove", chartMouseUp: "chartMouseUp", chartMouseOver: "chartMouseOver", chartMouseOut: "chartMouseOut", chartGlobalOut: "chartGlobalOut", chartContextMenu: "chartContextMenu", chartHighlight: "chartHighlight", chartDownplay: "chartDownplay", chartSelectChanged: "chartSelectChanged", chartLegendSelectChanged: "chartLegendSelectChanged", chartLegendSelected: "chartLegendSelected", chartLegendUnselected: "chartLegendUnselected", chartLegendLegendSelectAll: "chartLegendLegendSelectAll", chartLegendLegendInverseSelect: "chartLegendLegendInverseSelect", chartLegendScroll: "chartLegendScroll", chartDataZoom: "chartDataZoom", chartDataRangeSelected: "chartDataRangeSelected", chartGraphRoam: "chartGraphRoam", chartGeoRoam: "chartGeoRoam", chartTreeRoam: "chartTreeRoam", chartTimelineChanged: "chartTimelineChanged", chartTimelinePlayChanged: "chartTimelinePlayChanged", chartRestore: "chartRestore", chartDataViewChanged: "chartDataViewChanged", chartMagicTypeChanged: "chartMagicTypeChanged", chartGeoSelectChanged: "chartGeoSelectChanged", chartGeoSelected: "chartGeoSelected", chartGeoUnselected: "chartGeoUnselected", chartAxisAreaSelected: "chartAxisAreaSelected", chartBrush: "chartBrush", chartBrushEnd: "chartBrushEnd", chartBrushSelected: "chartBrushSelected", chartGlobalCursorTaken: "chartGlobalCursorTaken", chartRendered: "chartRendered", chartFinished: "chartFinished" }, exportAs: ["echarts"], usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: NgxEchartsDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: 'echarts, [echarts]',
                    exportAs: 'echarts',
                }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [NGX_ECHARTS_CONFIG]
                }] }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { options: [{
                type: Input
            }], theme: [{
                type: Input
            }], initOpts: [{
                type: Input
            }], merge: [{
                type: Input
            }], autoResize: [{
                type: Input
            }], loading: [{
                type: Input
            }], loadingType: [{
                type: Input
            }], loadingOpts: [{
                type: Input
            }], chartInit: [{
                type: Output
            }], optionsError: [{
                type: Output
            }], chartClick: [{
                type: Output
            }], chartDblClick: [{
                type: Output
            }], chartMouseDown: [{
                type: Output
            }], chartMouseMove: [{
                type: Output
            }], chartMouseUp: [{
                type: Output
            }], chartMouseOver: [{
                type: Output
            }], chartMouseOut: [{
                type: Output
            }], chartGlobalOut: [{
                type: Output
            }], chartContextMenu: [{
                type: Output
            }], chartHighlight: [{
                type: Output
            }], chartDownplay: [{
                type: Output
            }], chartSelectChanged: [{
                type: Output
            }], chartLegendSelectChanged: [{
                type: Output
            }], chartLegendSelected: [{
                type: Output
            }], chartLegendUnselected: [{
                type: Output
            }], chartLegendLegendSelectAll: [{
                type: Output
            }], chartLegendLegendInverseSelect: [{
                type: Output
            }], chartLegendScroll: [{
                type: Output
            }], chartDataZoom: [{
                type: Output
            }], chartDataRangeSelected: [{
                type: Output
            }], chartGraphRoam: [{
                type: Output
            }], chartGeoRoam: [{
                type: Output
            }], chartTreeRoam: [{
                type: Output
            }], chartTimelineChanged: [{
                type: Output
            }], chartTimelinePlayChanged: [{
                type: Output
            }], chartRestore: [{
                type: Output
            }], chartDataViewChanged: [{
                type: Output
            }], chartMagicTypeChanged: [{
                type: Output
            }], chartGeoSelectChanged: [{
                type: Output
            }], chartGeoSelected: [{
                type: Output
            }], chartGeoUnselected: [{
                type: Output
            }], chartAxisAreaSelected: [{
                type: Output
            }], chartBrush: [{
                type: Output
            }], chartBrushEnd: [{
                type: Output
            }], chartBrushSelected: [{
                type: Output
            }], chartGlobalCursorTaken: [{
                type: Output
            }], chartRendered: [{
                type: Output
            }], chartFinished: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWVjaGFydHMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWVjaGFydHMvc3JjL2xpYi9uZ3gtZWNoYXJ0cy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLFNBQVMsRUFFVCxZQUFZLEVBQ1osTUFBTSxFQUNOLGNBQWMsRUFDZCxLQUFLLEVBS0wsTUFBTSxHQUVQLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLE9BQU8sRUFBZ0IsY0FBYyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3hGLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDekQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDOztBQVVwRCxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLGNBQWMsQ0FBbUIsb0JBQW9CLENBQUMsQ0FBQztBQU83RixNQUFNLE9BQU8sbUJBQW1CO0lBMEU5QixZQUM4QixNQUF3QixFQUM1QyxFQUFjLEVBQ2QsTUFBYztRQURkLE9BQUUsR0FBRixFQUFFLENBQVk7UUFDZCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBNUVmLFlBQU8sR0FBeUIsSUFBSSxDQUFDO1FBQ3JDLFVBQUssR0FBZ0MsSUFBSSxDQUFDO1FBQzFDLGFBQVEsR0FNTixJQUFJLENBQUM7UUFDUCxVQUFLLEdBQXlCLElBQUksQ0FBQztRQUNuQyxlQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLFlBQU8sR0FBRyxLQUFLLENBQUM7UUFDaEIsZ0JBQVcsR0FBRyxTQUFTLENBQUM7UUFDeEIsZ0JBQVcsR0FBa0IsSUFBSSxDQUFDO1FBRTNDLHFCQUFxQjtRQUNYLGNBQVMsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBQ3BDLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQVMsQ0FB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dGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5qZWN0LFxuICBJbmplY3Rpb25Ub2tlbixcbiAgSW5wdXQsXG4gIE5nWm9uZSxcbiAgT25DaGFuZ2VzLFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgT3V0cHV0LFxuICBTaW1wbGVDaGFuZ2VzLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFJlcGxheVN1YmplY3QsIFN1YmplY3QsIFN1YnNjcmlwdGlvbiwgYXN5bmNTY2hlZHVsZXIgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHN3aXRjaE1hcCwgdGhyb3R0bGVUaW1lIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQ2hhbmdlRmlsdGVyVjIgfSBmcm9tICcuL2NoYW5nZS1maWx0ZXItdjInO1xuaW1wb3J0IHR5cGUgeyBFQ2hhcnRzT3B0aW9uLCBFQ2hhcnRzLCBFQ0VsZW1lbnRFdmVudCB9IGZyb20gJ2VjaGFydHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE5neEVjaGFydHNDb25maWcge1xuICBlY2hhcnRzOiBhbnkgfCAoKCkgPT4gUHJvbWlzZTxhbnk+KTtcbiAgdGhlbWU/OiBzdHJpbmcgfCBUaGVtZU9wdGlvbjtcbn1cblxuZXhwb3J0IHR5cGUgVGhlbWVPcHRpb24gPSBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xuXG5leHBvcnQgY29uc3QgTkdYX0VDSEFSVFNfQ09ORklHID0gbmV3IEluamVjdGlvblRva2VuPE5neEVjaGFydHNDb25maWc+KCdOR1hfRUNIQVJUU19DT05GSUcnKTtcblxuQERpcmVjdGl2ZSh7XG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIHNlbGVjdG9yOiAnZWNoYXJ0cywgW2VjaGFydHNdJyxcbiAgZXhwb3J0QXM6ICdlY2hhcnRzJyxcbn0pXG5leHBvcnQgY2xhc3MgTmd4RWNoYXJ0c0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQsIEFmdGVyVmlld0luaXQge1xuICBASW5wdXQoKSBvcHRpb25zOiBFQ2hhcnRzT3B0aW9uIHwgbnVsbCA9IG51bGw7XG4gIEBJbnB1dCgpIHRoZW1lOiBzdHJpbmcgfCBUaGVtZU9wdGlvbiB8IG51bGwgPSBudWxsO1xuICBASW5wdXQoKSBpbml0T3B0czoge1xuICAgIGRldmljZVBpeGVsUmF0aW8/OiBudW1iZXI7XG4gICAgcmVuZGVyZXI/OiBzdHJpbmc7XG4gICAgd2lkdGg/OiBudW1iZXIgfCBzdHJpbmc7XG4gICAgaGVpZ2h0PzogbnVtYmVyIHwgc3RyaW5nO1xuICAgIGxvY2FsZT86IHN0cmluZztcbiAgfSB8IG51bGwgPSBudWxsO1xuICBASW5wdXQoKSBtZXJnZTogRUNoYXJ0c09wdGlvbiB8IG51bGwgPSBudWxsO1xuICBASW5wdXQoKSBhdXRvUmVzaXplID0gdHJ1ZTtcbiAgQElucHV0KCkgbG9hZGluZyA9IGZhbHNlO1xuICBASW5wdXQoKSBsb2FkaW5nVHlwZSA9ICdkZWZhdWx0JztcbiAgQElucHV0KCkgbG9hZGluZ09wdHM6IG9iamVjdCB8IG51bGwgPSBudWxsO1xuXG4gIC8vIG5neC1lY2hhcnRzIGV2ZW50c1xuICBAT3V0cHV0KCkgY2hhcnRJbml0ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gIEBPdXRwdXQoKSBvcHRpb25zRXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyPEVycm9yPigpO1xuXG4gIC8vIGVjaGFydHMgbW91c2UgZXZlbnRzXG4gIEBPdXRwdXQoKSBjaGFydENsaWNrID0gdGhpcy5jcmVhdGVMYXp5RXZlbnQ8RUNFbGVtZW50RXZlbnQ+KCdjbGljaycpO1xuICBAT3V0cHV0KCkgY2hhcnREYmxDbGljayA9IHRoaXMuY3JlYXRlTGF6eUV2ZW50PEVDRWxlbWVudEV2ZW50PignZGJsY2xpY2snKTtcbiAgQE91dHB1dCgpIGNoYXJ0TW91c2VEb3duID0gdGhpcy5jcmVhdGVMYXp5RXZlbnQ8RUNFbGVtZW50RXZlbnQ+KCdtb3VzZWRvd24nKTtcbiAgQE91dHB1dCgpIGNoYXJ0TW91c2VNb3ZlID0gdGhpcy5jcmVhdGVMYXp5RXZlbnQ8RUNFbGVtZW50RXZlbnQ+KCdtb3VzZW1vdmUnKTtcbiAgQE91dHB1dCgpIGNoYXJ0TW91c2VVcCA9IHRoaXMuY3JlYXRlTGF6eUV2ZW50PEVDRWxlbWVudEV2ZW50PignbW91c2V1cCcpO1xuICBAT3V0cHV0KCkgY2hhcnRNb3VzZU92ZXIgPSB0aGlzLmNyZWF0ZUxhenlFdmVudDxFQ0VsZW1lbnRFdmVudD4oJ21vdXNlb3ZlcicpO1xuICBAT3V0cHV0KCkgY2hhcnRNb3VzZU91dCA9IHRoaXMuY3JlYXRlTGF6eUV2ZW50PEVDRWxlbWVudEV2ZW50PignbW91c2VvdXQnKTtcbiAgQE91dHB1dCgpIGNoYXJ0R2xvYmFsT3V0ID0gdGhpcy5jcmVhdGVMYXp5RXZlbnQ8RUNFbGVtZW50RXZlbnQ+KCdnbG9iYWxvdXQnKTtcbiAgQE91dHB1dCgpIGNoYXJ0Q29udGV4dE1lbnUgPSB0aGlzLmNyZWF0ZUxhenlFdmVudDxFQ0VsZW1lbnRFdmVudD4oJ2NvbnRleHRtZW51Jyk7XG5cbiAgLy8gZWNoYXJ0cyBldmVudHNcbiAgQE91dHB1dCgpIGNoYXJ0SGlnaGxpZ2h0ID0gdGhpcy5jcmVhdGVMYXp5RXZlbnQ8YW55PignaGlnaGxpZ2h0Jyk7XG4gIEBPdXRwdXQoKSBjaGFydERvd25wbGF5ID0gdGhpcy5jcmVhdGVMYXp5RXZlbnQ8YW55PignZG93bnBsYXknKTtcbiAgQE91dHB1dCgpIGNoYXJ0U2VsZWN0Q2hhbmdlZCA9IHRoaXMuY3JlYXRlTGF6eUV2ZW50PGFueT4oJ3NlbGVjdGNoYW5nZWQnKTtcbiAgQE91dHB1dCgpIGNoYXJ0TGVnZW5kU2VsZWN0Q2hhbmdlZCA9IHRoaXMuY3JlYXRlTGF6eUV2ZW50PGFueT4oJ2xlZ2VuZHNlbGVjdGNoYW5nZWQnKTtcbiAgQE91dHB1dCgpIGNoYXJ0TGVnZW5kU2VsZWN0ZWQgPSB0aGlzLmNyZWF0ZUxhenlFdmVudDxhbnk+KCdsZWdlbmRzZWxlY3RlZCcpO1xuICBAT3V0cHV0KCkgY2hhcnRMZWdlbmRVbnNlbGVjdGVkID0gdGhpcy5jcmVhdGVMYXp5RXZlbnQ8YW55PignbGVnZW5kdW5zZWxlY3RlZCcpO1xuICBAT3V0cHV0KCkgY2hhcnRMZWdlbmRMZWdlbmRTZWxlY3RBbGwgPSB0aGlzLmNyZWF0ZUxhenlFdmVudDxhbnk+KCdsZWdlbmRzZWxlY3RhbGwnKTtcbiAgQE91dHB1dCgpIGNoYXJ0TGVnZW5kTGVnZW5kSW52ZXJzZVNlbGVjdCA9IHRoaXMuY3JlYXRlTGF6eUV2ZW50PGFueT4oJ2xlZ2VuZGludmVyc2VzZWxlY3QnKTtcbiAgQE91dHB1dCgpIGNoYXJ0TGVnZW5kU2Nyb2xsID0gdGhpcy5jcmVhdGVMYXp5RXZlbnQ8YW55PignbGVnZW5kc2Nyb2xsJyk7XG4gIEBPdXRwdXQoKSBjaGFydERhdGFab29tID0gdGhpcy5jcmVhdGVMYXp5RXZlbnQ8YW55PignZGF0YXpvb20nKTtcbiAgQE91dHB1dCgpIGNoYXJ0RGF0YVJhbmdlU2VsZWN0ZWQgPSB0aGlzLmNyZWF0ZUxhenlFdmVudDxhbnk+KCdkYXRhcmFuZ2VzZWxlY3RlZCcpO1xuICBAT3V0cHV0KCkgY2hhcnRHcmFwaFJvYW0gPSB0aGlzLmNyZWF0ZUxhenlFdmVudDxhbnk+KCdncmFwaHJvYW0nKTtcbiAgQE91dHB1dCgpIGNoYXJ0R2VvUm9hbSA9IHRoaXMuY3JlYXRlTGF6eUV2ZW50PGFueT4oJ2dlb3JvYW0nKTtcbiAgQE91dHB1dCgpIGNoYXJ0VHJlZVJvYW0gPSB0aGlzLmNyZWF0ZUxhenlFdmVudDxhbnk+KCd0cmVlcm9hbScpO1xuICBAT3V0cHV0KCkgY2hhcnRUaW1lbGluZUNoYW5nZWQgPSB0aGlzLmNyZWF0ZUxhenlFdmVudDxhbnk+KCd0aW1lbGluZWNoYW5nZWQnKTtcbiAgQE91dHB1dCgpIGNoYXJ0VGltZWxpbmVQbGF5Q2hhbmdlZCA9IHRoaXMuY3JlYXRlTGF6eUV2ZW50PGFueT4oJ3RpbWVsaW5lcGxheWNoYW5nZWQnKTtcbiAgQE91dHB1dCgpIGNoYXJ0UmVzdG9yZSA9IHRoaXMuY3JlYXRlTGF6eUV2ZW50PGFueT4oJ3Jlc3RvcmUnKTtcbiAgQE91dHB1dCgpIGNoYXJ0RGF0YVZpZXdDaGFuZ2VkID0gdGhpcy5jcmVhdGVMYXp5RXZlbnQ8YW55PignZGF0YXZpZXdjaGFuZ2VkJyk7XG4gIEBPdXRwdXQoKSBjaGFydE1hZ2ljVHlwZUNoYW5nZWQgPSB0aGlzLmNyZWF0ZUxhenlFdmVudDxhbnk+KCdtYWdpY3R5cGVjaGFuZ2VkJyk7XG4gIEBPdXRwdXQoKSBjaGFydEdlb1NlbGVjdENoYW5nZWQgPSB0aGlzLmNyZWF0ZUxhenlFdmVudDxhbnk+KCdnZW9zZWxlY3RjaGFuZ2VkJyk7XG4gIEBPdXRwdXQoKSBjaGFydEdlb1NlbGVjdGVkID0gdGhpcy5jcmVhdGVMYXp5RXZlbnQ8YW55PignZ2Vvc2VsZWN0ZWQnKTtcbiAgQE91dHB1dCgpIGNoYXJ0R2VvVW5zZWxlY3RlZCA9IHRoaXMuY3JlYXRlTGF6eUV2ZW50PGFueT4oJ2dlb3Vuc2VsZWN0ZWQnKTtcbiAgQE91dHB1dCgpIGNoYXJ0QXhpc0FyZWFTZWxlY3RlZCA9IHRoaXMuY3JlYXRlTGF6eUV2ZW50PGFueT4oJ2F4aXNhcmVhc2VsZWN0ZWQnKTtcbiAgQE91dHB1dCgpIGNoYXJ0QnJ1c2ggPSB0aGlzLmNyZWF0ZUxhenlFdmVudDxhbnk+KCdicnVzaCcpO1xuICBAT3V0cHV0KCkgY2hhcnRCcnVzaEVuZCA9IHRoaXMuY3JlYXRlTGF6eUV2ZW50PGFueT4oJ2JydXNoZW5kJyk7XG4gIEBPdXRwdXQoKSBjaGFydEJydXNoU2VsZWN0ZWQgPSB0aGlzLmNyZWF0ZUxhenlFdmVudDxhbnk+KCdicnVzaHNlbGVjdGVkJyk7XG4gIEBPdXRwdXQoKSBjaGFydEdsb2JhbEN1cnNvclRha2VuID0gdGhpcy5jcmVhdGVMYXp5RXZlbnQ8YW55PignZ2xvYmFsY3Vyc29ydGFrZW4nKTtcbiAgQE91dHB1dCgpIGNoYXJ0UmVuZGVyZWQgPSB0aGlzLmNyZWF0ZUxhenlFdmVudDxhbnk+KCdyZW5kZXJlZCcpO1xuICBAT3V0cHV0KCkgY2hhcnRGaW5pc2hlZCA9IHRoaXMuY3JlYXRlTGF6eUV2ZW50PGFueT4oJ2ZpbmlzaGVkJyk7XG5cbiAgcHVibGljIGFuaW1hdGlvbkZyYW1lSUQgPSBudWxsO1xuICBwcml2YXRlIGNoYXJ0OiBFQ2hhcnRzO1xuICBwcml2YXRlIGNoYXJ0JCA9IG5ldyBSZXBsYXlTdWJqZWN0PEVDaGFydHM+KDEpO1xuICBwcml2YXRlIGVjaGFydHM6IGFueTtcbiAgcHJpdmF0ZSByZXNpemVPYjogUmVzaXplT2JzZXJ2ZXI7XG4gIHByaXZhdGUgcmVzaXplJCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG4gIHByaXZhdGUgcmVzaXplU3ViOiBTdWJzY3JpcHRpb247XG4gIHByaXZhdGUgaW5pdENoYXJ0VGltZXI/OiBudW1iZXI7XG4gIHByaXZhdGUgY2hhbmdlRmlsdGVyID0gbmV3IENoYW5nZUZpbHRlclYyKCk7XG4gIHByaXZhdGUgbG9hZGluZ1N1YjogU3Vic2NyaXB0aW9uO1xuICBwcml2YXRlIHJlc2l6ZU9iRmlyZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KE5HWF9FQ0hBUlRTX0NPTkZJRykgY29uZmlnOiBOZ3hFY2hhcnRzQ29uZmlnLFxuICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZVxuICApIHtcbiAgICB0aGlzLmVjaGFydHMgPSBjb25maWcuZWNoYXJ0cztcbiAgICB0aGlzLnRoZW1lID0gY29uZmlnLnRoZW1lIHx8IG51bGw7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgdGhpcy5jaGFuZ2VGaWx0ZXIuZG9GaWx0ZXIoY2hhbmdlcyk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAoIXdpbmRvdy5SZXNpemVPYnNlcnZlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdwbGVhc2UgaW5zdGFsbCBhIHBvbHlmaWxsIGZvciBSZXNpemVPYnNlcnZlcicpO1xuICAgIH1cbiAgICB0aGlzLnJlc2l6ZVN1YiA9IHRoaXMucmVzaXplJFxuICAgICAgLnBpcGUodGhyb3R0bGVUaW1lKDEwMCwgYXN5bmNTY2hlZHVsZXIsIHsgbGVhZGluZzogZmFsc2UsIHRyYWlsaW5nOiB0cnVlIH0pKVxuICAgICAgLnN1YnNjcmliZSgoKSA9PiB0aGlzLnJlc2l6ZSgpKTtcblxuICAgIGlmICh0aGlzLmF1dG9SZXNpemUpIHtcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS94aWV6aXl1L25neC1lY2hhcnRzL2lzc3Vlcy80MTNcbiAgICAgIHRoaXMucmVzaXplT2IgPSB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcihcbiAgICAgICAgKCkgPT5cbiAgICAgICAgICBuZXcgd2luZG93LlJlc2l6ZU9ic2VydmVyKGVudHJpZXMgPT4ge1xuICAgICAgICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBlbnRyaWVzKSB7XG4gICAgICAgICAgICAgIGlmIChlbnRyeS50YXJnZXQgPT09IHRoaXMuZWwubmF0aXZlRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIC8vIElnbm9yZSBmaXJzdCBmaXJlIG9uIGluc2VydGlvbiwgbm8gcmVzaXplIGFjdHVhbGx5IGhhcHBlbmVkXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnJlc2l6ZU9iRmlyZWQpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMucmVzaXplT2JGaXJlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uRnJhbWVJRCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc2l6ZSQubmV4dCgpO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICk7XG4gICAgICB0aGlzLnJlc2l6ZU9iLm9ic2VydmUodGhpcy5lbC5uYXRpdmVFbGVtZW50KTtcbiAgICB9XG5cbiAgICB0aGlzLmNoYW5nZUZpbHRlci5ub3RGaXJzdEFuZEVtcHR5KCdvcHRpb25zJywgb3B0ID0+IHRoaXMub25PcHRpb25zQ2hhbmdlKG9wdCkpO1xuICAgIHRoaXMuY2hhbmdlRmlsdGVyLm5vdEZpcnN0QW5kRW1wdHkoJ21lcmdlJywgb3B0ID0+IHRoaXMuc2V0T3B0aW9uKG9wdCkpO1xuICAgIHRoaXMuY2hhbmdlRmlsdGVyLmhhczxib29sZWFuPignbG9hZGluZycsIHYgPT4gdGhpcy50b2dnbGVMb2FkaW5nKCEhdikpO1xuICAgIHRoaXMuY2hhbmdlRmlsdGVyLm5vdEZpcnN0PHN0cmluZyB8IFRoZW1lT3B0aW9uPigndGhlbWUnLCAoKSA9PiB0aGlzLnJlZnJlc2hDaGFydCgpKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5pbml0Q2hhcnRUaW1lcik7XG4gICAgaWYgKHRoaXMucmVzaXplU3ViKSB7XG4gICAgICB0aGlzLnJlc2l6ZVN1Yi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5hbmltYXRpb25GcmFtZUlEKSB7XG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5hbmltYXRpb25GcmFtZUlEKTtcbiAgICB9XG4gICAgaWYgKHRoaXMucmVzaXplT2IpIHtcbiAgICAgIHRoaXMucmVzaXplT2IudW5vYnNlcnZlKHRoaXMuZWwubmF0aXZlRWxlbWVudCk7XG4gICAgfVxuICAgIGlmICh0aGlzLmxvYWRpbmdTdWIpIHtcbiAgICAgIHRoaXMubG9hZGluZ1N1Yi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgICB0aGlzLmNoYW5nZUZpbHRlci5kaXNwb3NlKCk7XG4gICAgdGhpcy5kaXNwb3NlKCk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5pbml0Q2hhcnRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHRoaXMuaW5pdENoYXJ0KCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBkaXNwb3NlKCkge1xuICAgIGlmICh0aGlzLmNoYXJ0KSB7XG4gICAgICBpZiAoIXRoaXMuY2hhcnQuaXNEaXNwb3NlZCgpKSB7XG4gICAgICAgIHRoaXMuY2hhcnQuZGlzcG9zZSgpO1xuICAgICAgfVxuICAgICAgdGhpcy5jaGFydCA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIHJlc2l6ZSBjaGFydFxuICAgKi9cbiAgcmVzaXplKCkge1xuICAgIGlmICh0aGlzLmNoYXJ0KSB7XG4gICAgICB0aGlzLmNoYXJ0LnJlc2l6ZSgpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdG9nZ2xlTG9hZGluZyhsb2FkaW5nOiBib29sZWFuKSB7XG4gICAgaWYgKHRoaXMuY2hhcnQpIHtcbiAgICAgIGxvYWRpbmdcbiAgICAgICAgPyB0aGlzLmNoYXJ0LnNob3dMb2FkaW5nKHRoaXMubG9hZGluZ1R5cGUsIHRoaXMubG9hZGluZ09wdHMpXG4gICAgICAgIDogdGhpcy5jaGFydC5oaWRlTG9hZGluZygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxvYWRpbmdTdWIgPSB0aGlzLmNoYXJ0JC5zdWJzY3JpYmUoY2hhcnQgPT5cbiAgICAgICAgbG9hZGluZyA/IGNoYXJ0LnNob3dMb2FkaW5nKHRoaXMubG9hZGluZ1R5cGUsIHRoaXMubG9hZGluZ09wdHMpIDogY2hhcnQuaGlkZUxvYWRpbmcoKVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHNldE9wdGlvbihvcHRpb246IGFueSwgb3B0cz86IGFueSkge1xuICAgIGlmICh0aGlzLmNoYXJ0KSB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLmNoYXJ0LnNldE9wdGlvbihvcHRpb24sIG9wdHMpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICB0aGlzLm9wdGlvbnNFcnJvci5lbWl0KGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBkaXNwb3NlIG9sZCBjaGFydCBhbmQgY3JlYXRlIGEgbmV3IG9uZS5cbiAgICovXG4gIGFzeW5jIHJlZnJlc2hDaGFydCgpIHtcbiAgICB0aGlzLmRpc3Bvc2UoKTtcbiAgICBhd2FpdCB0aGlzLmluaXRDaGFydCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVDaGFydCgpIHtcbiAgICBjb25zdCBkb20gPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XG5cbiAgICBpZiAod2luZG93ICYmIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKSB7XG4gICAgICBjb25zdCBwcm9wID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZG9tLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKCdoZWlnaHQnKTtcbiAgICAgIGlmICgoIXByb3AgfHwgcHJvcCA9PT0gJzBweCcpICYmICghZG9tLnN0eWxlLmhlaWdodCB8fCBkb20uc3R5bGUuaGVpZ2h0ID09PSAnMHB4JykpIHtcbiAgICAgICAgZG9tLnN0eWxlLmhlaWdodCA9ICc0MDBweCc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gaGVyZSBhIGJpdCB0cmlja3k6IHdlIGNoZWNrIGlmIHRoZSBlY2hhcnRzIG1vZHVsZSBpcyBwcm92aWRlZCBhcyBmdW5jdGlvbiByZXR1cm5pbmcgbmF0aXZlIGltcG9ydCgnLi4uJykgdGhlbiB1c2UgdGhlIHByb21pc2VcbiAgICAvLyBvdGhlcndpc2UgY3JlYXRlIHRoZSBmdW5jdGlvbiB0aGF0IGltaXRhdGVzIGJlaGF2aW91ciBhYm92ZSB3aXRoIGEgcHJvdmlkZWQgYXMgaXMgbW9kdWxlXG4gICAgcmV0dXJuIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIGNvbnN0IGxvYWQgPVxuICAgICAgICB0eXBlb2YgdGhpcy5lY2hhcnRzID09PSAnZnVuY3Rpb24nID8gdGhpcy5lY2hhcnRzIDogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuZWNoYXJ0cyk7XG5cbiAgICAgIHJldHVybiBsb2FkKCkudGhlbigoeyBpbml0IH0pID0+IGluaXQoZG9tLCB0aGlzLnRoZW1lLCB0aGlzLmluaXRPcHRzKSk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGluaXRDaGFydCgpIHtcbiAgICBhd2FpdCB0aGlzLm9uT3B0aW9uc0NoYW5nZSh0aGlzLm9wdGlvbnMpO1xuXG4gICAgaWYgKHRoaXMubWVyZ2UgJiYgdGhpcy5jaGFydCkge1xuICAgICAgdGhpcy5zZXRPcHRpb24odGhpcy5tZXJnZSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBvbk9wdGlvbnNDaGFuZ2Uob3B0OiBhbnkpIHtcbiAgICBpZiAoIW9wdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmNoYXJ0KSB7XG4gICAgICB0aGlzLnNldE9wdGlvbih0aGlzLm9wdGlvbnMsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNoYXJ0ID0gYXdhaXQgdGhpcy5jcmVhdGVDaGFydCgpO1xuICAgICAgdGhpcy5jaGFydCQubmV4dCh0aGlzLmNoYXJ0KTtcbiAgICAgIHRoaXMuY2hhcnRJbml0LmVtaXQodGhpcy5jaGFydCk7XG4gICAgICB0aGlzLnNldE9wdGlvbih0aGlzLm9wdGlvbnMsIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGFsbG93cyB0byBsYXppbHkgYmluZCB0byBvbmx5IHRob3NlIGV2ZW50cyB0aGF0IGFyZSByZXF1ZXN0ZWQgdGhyb3VnaCB0aGUgYEBPdXRwdXRgIGJ5IHBhcmVudCBjb21wb25lbnRzXG4gIC8vIHNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy81MTc4Nzk3Mi9vcHRpbWFsLXJlZW50ZXJpbmctdGhlLW5nem9uZS1mcm9tLWV2ZW50ZW1pdHRlci1ldmVudCBmb3IgbW9yZSBpbmZvXG4gIHByaXZhdGUgY3JlYXRlTGF6eUV2ZW50PFQ+KGV2ZW50TmFtZTogc3RyaW5nKTogRXZlbnRFbWl0dGVyPFQ+IHtcbiAgICByZXR1cm4gdGhpcy5jaGFydEluaXQucGlwZShcbiAgICAgIHN3aXRjaE1hcChcbiAgICAgICAgKGNoYXJ0OiBhbnkpID0+XG4gICAgICAgICAgbmV3IE9ic2VydmFibGUob2JzZXJ2ZXIgPT4ge1xuICAgICAgICAgICAgY2hhcnQub24oZXZlbnROYW1lLCAoZGF0YTogVCkgPT4gdGhpcy5uZ1pvbmUucnVuKCgpID0+IG9ic2VydmVyLm5leHQoZGF0YSkpKTtcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgIGlmICh0aGlzLmNoYXJ0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNoYXJ0LmlzRGlzcG9zZWQoKSkge1xuICAgICAgICAgICAgICAgICAgY2hhcnQub2ZmKGV2ZW50TmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pXG4gICAgICApXG4gICAgKSBhcyBFdmVudEVtaXR0ZXI8VD47XG4gIH1cbn1cbiJdfQ==